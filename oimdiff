#!/usr/bin/env python3
import xbrl
import sys
import logging
import os
import os.path
import argparse
import json
import traceback
from xbrl.json.report import JSONSerialiser
from urllib.parse import urlparse, urljoin
from urllib.request import pathname2url
from lxml import etree

def urlise(urlOrPath):
    url = urlparse(urlOrPath)
    if url.scheme == '':
        return "file:%s" % pathname2url(os.path.abspath(urlOrPath))
    return urlOrPath

def loadReport(urlOrPath):
    try:
        if args.verbose:
            print("Loading: %s" % urlOrPath)
        src = urlise(urlOrPath)

#        report = processor.loadXBRLCSVReport(src)
        (report, err) = processor.loadReport(src)
        if err is not None:
            print(err)
            return None
        if args.verbose:
            print("Loaded %d facts" % len(report.facts))
        return report


    except xbrl.XBRLError as e:
        print("%s: [%s] %s" % (urlOrPath, e.code_as_qname, e.message))
        return None

parser = argparse.ArgumentParser(description="XBRL Processor")
parser.add_argument('--addTaxonomy', dest="packages", action="append", help="Load a taxonomy package.")
parser.add_argument('--packages', '-p', dest="packageDir", action="append", help="Load all taxonomy packages from a directory.")
#parser.add_argument('-c', '--csv', dest="csv", action="store_true", help="Load an xBRL-CSV report.")
#parser.add_argument('-t', '--testsuite', dest="test", action="store_true", help="Load and run a conformance suite.")
parser.add_argument('-v', '--verbose', dest="verbose", action="store_true", help="Be more verbose.")
parser.add_argument('-d', '--debug', dest="debug", action="append", help="Enable debug for the specified module (e.g. xbrl.csv).  Specify \"all\" for all modules.", metavar="MODULE")
#parser.add_argument('-V', '--variation', dest="variations", action="append", help="Run specific variations from a test suite.  Requires -t and implies -v.")
parser.add_argument('reporta', metavar='REPORT-A')
parser.add_argument('reportb', metavar='REPORT-B')
parser.add_argument("-e", "--equivalent", action="store_true", help="Only check reports for equivalence, rather than equality")
args = parser.parse_args()

level = logging.WARNING
logging.basicConfig(level=level)

if args.debug is not None:
    for d in args.debug:
        if d == 'all':
            logging.getLogger("").setLevel(logging.DEBUG)
        else:
            logging.getLogger(d).setLevel(logging.DEBUG)

processor = xbrl.XBRLProcessor(packageDirs=args.packageDir)

if args.packages is not None:
    for tp in args.packages:
        processor.addTaxonomyPackage(tp)

try:
    reporta = loadReport(args.reporta)
    reportb = loadReport(args.reportb)
    if reporta is None or reportb is None:
        sys.exit(1)
    diffs = reporta.compare(reportb, onlyEquivalent = args.equivalent)
    if len(diffs) > 0:
        print("Reports differ")
        for d in diffs:
            print(d)
    else:
        print("Reports are " + ("equivalent" if args.equivalent else "equal"))


except xbrl.XBRLError as e:
    print("[%s] %s" % (e.code_as_qname, e.message))

