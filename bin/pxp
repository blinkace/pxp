#!/usr/bin/env python3
import xbrl
import sys
import logging
import os
import os.path
import argparse
import json
import traceback
import re
from xbrl.json.report import JSONSerialiser
from xbrl.common import DocumentClass
from xbrl import TaxonomyPackageLoader
from urllib.parse import urlparse, urljoin
from urllib.request import pathname2url
from lxml import etree
import contextlib

@contextlib.contextmanager
def smart_open(filename=None):
    if filename and filename != '-':
        fh = open(filename, 'w')
    else:
        fh = sys.stdout

    try:
        yield fh
    finally:
        if fh is not sys.stdout:
            fh.close()

def open_report(url):
    documentClass = None
    if args.csv:
        documentClass = DocumentClass.XBRL_CSV
    elif args.json:
        documentClass = DocumentClass.XBRL_JSON
    elif args.xbrl:
        documentClass = DocumentClass.XBRL_2_1
    elif args.ixbrl:
        documentClass = DocumentClass.INLINE_XBRL

    (report, err, validationResult) = processor.loadReport(url, documentClass)
    if err is not None:
        print(err)
        sys.exit(1)
    return (report, validationResult)


def runSuite(src):
    suite = processor.loadTestSuite(src)
    passed = 0
    run = 0
    for v in suite.variations:
        if args.variations is None or (any(re.match(va, v.id) is not None for va in args.variations)):
            run += 1
            if len(v.inputs) != 1:
                print("Variation has %d inputs" % len(v.inputs))
            else:
                errors = set()
                try:
                    if not v.isTaxonomyPackageInput:
                        (report, vr) = open_report(urljoin(suite.url, v.inputs[0].url))
                        if args.test_output_suffix is not None:
                            (filename, suffix) = os.path.basename(v.inputs[0].url).split('.', 1)
                            outfile = "%s%s" % (filename, args.test_output_suffix)
                            print("writing to %s" % outfile)
                            with open(outfile, "w") as fout:
                                if args.dont_preserve_prefixes:
                                    report.ns_to_prefix = dict()
                                js = JSONSerialiser()
                                json.dump(js.serialise(report), fout, indent=2)
                    else:
                        tpl = TaxonomyPackageLoader(processor, raiseFatal = False, qualityCheck = False)
                        tpl.load(urlparse(urljoin(suite.url, v.inputs[0].url)).path)
                        vr = tpl.validationResult

                    errors = { e.code for e in vr.messages }
                    if args.verbose or args.variations is not None:
                        print(vr)
                except Exception as e:
                    errors = { etree.QName("{}UncaughtException") }
                    print(traceback.format_exc())
                # == to cover empty sets, otherwise intersect.
                if (errors == v.errors or errors & v.errors):
                    print("%-7s ok" % v.id)
                    passed += 1
                else:
                    print("%-7s fail" % v.id)
                    print("  Got: %s Expected: %s" % ("".join(e.text for e in errors), "".join(e.text for e in v.errors)))
                    if args.variations is not None:
                        print("%s: %s" % (v.id, v.name))
                        print(v.description)

    print("%d of %d passed (%.1f%%)" % (passed, run, (100*passed/(run or 1))))

def urlise(urlOrPath):
    url = urlparse(urlOrPath)
    if url.scheme == '':
        return "file:%s" % pathname2url(os.path.abspath(urlOrPath))
    return urlOrPath

parser = argparse.ArgumentParser(description="XBRL Processor")
parser.add_argument('--add-taxonomy', '--tp', dest="packages", action="append", help="Load a taxonomy package.")
parser.add_argument('--packages', '-p', dest="packageDir", action="append", help="Load all taxonomy packages from a directory.")
parser.add_argument('--csv', dest="csv", action="store_true", help="Treat input as an xBRL-CSV report")
parser.add_argument('--json', dest="json", action="store_true", help="Treat input as an xBRL-JSON report")
parser.add_argument('--xbrl', dest="xbrl", action="store_true", help="Treat input as an XBRL v2.1 report")
parser.add_argument('--taxonomy-package', dest="taxonomy_package", action="store_true", help="Treat input as Taxonomy Package")
parser.add_argument('--no-preserve-prefixes', dest="dont_preserve_prefixes", action="store_true", help="Don't preserve prefixes when generating")
parser.add_argument('--ixbrl', dest="ixbrl", action="store_true", help="Treat input as an Inline XBRL report")
parser.add_argument('-t', '--testsuite', dest="test", action="store_true", help="Treat the input as a conformance suite index file and run the test suite")
parser.add_argument('-o', '--output', dest="output", action="store", help="Write report to specified file (xBRL-JSON by default)")
parser.add_argument('-v', '--verbose', dest="verbose", action="store_true", help="Be more verbose.")
parser.add_argument('-d', '--debug', dest="debug", action="append", help="Enable debug for the specified module (e.g. xbrl.csv).  Specify \"all\" for all modules.", metavar="MODULE")
parser.add_argument('-V', '--variation', dest="variations", action="append", help="Run specific variations from a test suite.  Requires -t and implies -v.")
parser.add_argument('--test-output-suffix', dest="test_output_suffix", action="store")
parser.add_argument('--packages-only', dest="packages_only", action="store_true", help="Only permit files references from taxonomy packages")
parser.add_argument('--oim-version', dest="oim_version", action="store", help="Set OIM version")
parser.add_argument('reports', metavar='REPORT', nargs="+")
args = parser.parse_args()

level = logging.WARNING
logging.basicConfig(level=level)

if args.debug is not None:
    for d in args.debug:
        if d == 'all':
            logging.getLogger("").setLevel(logging.DEBUG)
        else:
            logging.getLogger(d).setLevel(logging.DEBUG)

if args.oim_version:
    xbrl.const.setOIMVersion(args.oim_version)

processor = xbrl.XBRLProcessor(packageDirs=args.packageDir, packagesOnly = args.packages_only)

if args.packages is not None:
    for tp in args.packages:
        processor.addTaxonomyPackage(tp)

try:
    src = urlise(args.reports[0])

    #print("Loading: %s" % src)
    
    #report = processor.loadXBRLReport(src)

    if args.test:
        runSuite(src)
    elif args.taxonomy_package:
        tpl = TaxonomyPackageLoader(processor, raiseFatal = False, qualityCheck = True)
        if args.verbose:
            print("Opening taxonomy package %s" % src)
        tpl.load(urlparse(src).path)
        print(tpl.validationResult)
    else:
        (report, vr) = open_report(src)
        print(vr)
        if args.output:
            if args.dont_preserve_prefixes:
                report.ns_to_prefix = dict()
            js = JSONSerialiser()
            with smart_open(args.output) as fout:
                json.dump(js.serialise(report), fout, indent=2)

    #if args.csv:
    #    report = processor.loadXBRLCSVReport(src)


except xbrl.XBRLError as e:
    print("[%s] %s" % (e.code_as_qname, e.message))

